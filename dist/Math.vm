function Math.init 2
push constant 16
call Array.new 1
pop static 0
push constant 0
pop local 1
push constant 1
pop local 0
label WHILE.Math.init.1
push local 1
push constant 16
lt
not
if-goto ENDWHILE.Math.init.1
pop temp 2
push static 0
push local 1
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push local 0
add
pop local 0
push local 1
push constant 1
add
pop local 1
goto WHILE.Math.init.1
label ENDWHILE.Math.init.1
push constant 0
return
function Math.multiply 9
push constant 0
pop local 0
push argument 0
pop local 2
push constant 0
pop local 1
label WHILE.Math.multiply.3
push local 1
push constant 16
lt
not
if-goto ENDWHILE.Math.multiply.3
pop temp 2
push local 1
call Math.bit 1
pop local 3
push argument 1
push local 3
and
push local 3
eq
not
if-goto ELSE.Math.multiply.3
pop temp 2
push local 0
push local 2
add
pop local 0
goto ENDIF.Math.multiply.3
label ELSE.Math.multiply.3
label ENDIF.Math.multiply.3
push local 2
push local 2
add
pop local 2
push local 1
push constant 1
add
pop local 1
goto WHILE.Math.multiply.3
label ENDWHILE.Math.multiply.3
push local 0
return
function Math.bit 18
push static 0
push argument 0
add
pop pointer 1
push that 0
return
function Math.divide 41
push argument 1
push constant 0
eq
push argument 0
push constant 0
eq
or
not
if-goto ELSE.Math.divide.4
pop temp 2
push constant 0
return
goto ENDIF.Math.divide.4
label ELSE.Math.divide.4
label ENDIF.Math.divide.4
push argument 0
push constant 0
gt
push argument 0
push constant 0
eq
or
push argument 1
push constant 0
gt
push argument 1
push constant 0
eq
or
and
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
and
or
not
if-goto ELSE.Math.divide.5
pop temp 2
push constant 0
pop local 4
goto ENDIF.Math.divide.5
label ELSE.Math.divide.5
push constant 1
pop local 4
label ENDIF.Math.divide.5
push argument 0
call Math.abs 1
pop local 1
push argument 1
call Math.abs 1
pop local 2
push local 2
push local 1
gt
push local 2
push constant 0
lt
or
not
if-goto ELSE.Math.divide.6
pop temp 2
push constant 0
return
goto ENDIF.Math.divide.6
label ELSE.Math.divide.6
label ENDIF.Math.divide.6
push local 1
push local 2
push local 2
add
call Math.divide 2
pop local 0
push local 1
push constant 2
push local 0
push local 2
call Math.multiply 2
call Math.multiply 2
sub
push local 2
lt
not
if-goto ELSE.Math.divide.7
pop temp 2
push local 0
push local 0
add
pop local 3
goto ENDIF.Math.divide.7
label ELSE.Math.divide.7
push local 0
push local 0
push constant 1
add
add
pop local 3
label ENDIF.Math.divide.7
push local 4
not
if-goto ELSE.Math.divide.8
pop temp 2
push local 3
neg
pop local 3
goto ENDIF.Math.divide.8
label ELSE.Math.divide.8
label ENDIF.Math.divide.8
push local 3
return
function Math.mod 83
push argument 0
push argument 1
call Math.divide 2
pop local 0
push argument 0
push local 0
push argument 1
call Math.multiply 2
sub
return
function Math.abs 166
push argument 0
push constant 0
lt
not
if-goto ELSE.Math.abs.9
pop temp 2
push argument 0
neg
return
goto ENDIF.Math.abs.9
label ELSE.Math.abs.9
push argument 0
return
label ENDIF.Math.abs.9
function Math.pow 333
push argument 1
push constant 0
eq
not
if-goto ELSE.Math.pow.10
pop temp 2
push constant 1
return
goto ENDIF.Math.pow.10
label ELSE.Math.pow.10
label ENDIF.Math.pow.10
push argument 0
pop local 0
label WHILE.Math.pow.11
push argument 1
push constant 1
gt
not
if-goto ENDWHILE.Math.pow.11
pop temp 2
push local 0
push argument 0
call Math.multiply 2
pop local 0
push argument 1
push constant 1
sub
pop argument 1
goto WHILE.Math.pow.11
label ENDWHILE.Math.pow.11
push local 0
return
function Math.sqrt 668
push constant 1
pop local 0
push constant 1
pop local 1
label WHILE.Math.sqrt.12
push local 1
push argument 0
lt
push local 1
push argument 0
eq
or
push local 1
push constant 0
gt
and
not
if-goto ENDWHILE.Math.sqrt.12
pop temp 2
push local 0
push constant 1
add
pop local 0
push local 0
push local 0
call Math.multiply 2
pop local 1
goto WHILE.Math.sqrt.12
label ENDWHILE.Math.sqrt.12
push local 0
push constant 1
sub
return
function Math.min 1336
push argument 0
push argument 1
lt
not
if-goto ELSE.Math.min.13
pop temp 2
push argument 0
return
goto ENDIF.Math.min.13
label ELSE.Math.min.13
push argument 1
return
label ENDIF.Math.min.13
function Math.max 2672
push argument 0
push argument 1
gt
not
if-goto ELSE.Math.max.14
pop temp 2
push argument 0
return
goto ENDIF.Math.max.14
label ELSE.Math.max.14
push argument 1
return
label ENDIF.Math.max.14
function Math.factorial 5344
push argument 0
push constant 1
eq
not
if-goto ELSE.Math.factorial.15
pop temp 2
push constant 1
return
goto ENDIF.Math.factorial.15
label ELSE.Math.factorial.15
label ENDIF.Math.factorial.15
push argument 0
push argument 0
push constant 1
sub
call Math.factorial 1
call Math.multiply 2
return
